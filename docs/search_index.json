[["acessando-e-manipulação-de-dados.html", "Capítulo 3 Acessando e manipulação de dados 3.1 Organização 3.2 Operadores 3.3 Dica de leitura 3.4 Exercícios", " Capítulo 3 Acessando e manipulação de dados 3.1 Organização Assista este conteúdo em Cap 2 - Organização no PVANet Como mencionado anteriormente, vector é uma das principais estruturas do R. Um vetor é uma sequência de elementos (1n) do mesmo tipo organizados tal qual livros em uma prateleira. No caso abaixo temos um vetor numérico que pode ser integer ou double. a&lt;-c(25,17,55,3,12,315,10,2,3,11) a ## [1] 25 17 55 3 12 315 10 2 3 11 Posição 1 2 3 4 5 6 7 8 9 10 Elementos 25 17 55 3 12 315 10 2 3 11 Um vetor também pode armazernar caracteres. Neste caso eles devem estar entre aspas duplas (\"\"). b&lt;-c(&quot;Z&quot;,&quot;f&quot;, &quot;7&quot;,&quot;2a&quot;,&quot;Yes&quot;,&quot;A&quot;,&quot;Ab&quot;) b;typeof(b) ## [1] &quot;Z&quot; &quot;f&quot; &quot;7&quot; &quot;2a&quot; &quot;Yes&quot; &quot;A&quot; &quot;Ab&quot; ## [1] &quot;character&quot; Embora tenhamos o número 7 entre os nossos elementos do vetor acima, por estar entre aspas o número 7 não é numéric, mas caractere. Lembrem-se que um vector é um banco de dados da mesmo tipo Logo, se você colocar um número 7 dentro dele, o R vai automaticamente convertê-lo em caractere independente de estar entre \"\" ou não. Posição 1 2 3 4 5 6 7 Elementos Z f 7 2a Yes A Ab Mesmo que você tenha apenas um único numeral ele será armazenado como vector, vector de comprimento = 1. Então um único número ou um único caractere será um vector. c&lt;-(1) c;typeof(c);is.vector(c) ## [1] 1 ## [1] &quot;double&quot; ## [1] TRUE Posição 1 Elemento 1 Entender a posição de cada elemento dentro de um vector é crucial! Saber a posição correta onde determinado(s) elemento(s) está(estão) facilita em muito nossa limpeza, nosso tratamento e demais passos para uma eficiente manipulação dos dados. seq(100,50,-1) ## [1] 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 ## [20] 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 ## [39] 62 61 60 59 58 57 56 55 54 53 52 51 50 Atenção para os números dentro dos colchetes [1] [17] [33] [49]. Como mencionado em aulas passadas, eles, os colchetes, indicam a posição de determinados elementos dentro de um banco de dados. Especificamente o [1] informa que o número 100 é o primeiro elemento, [17] informa que o número 84 é o vigésimo elemento, [33] informa que o número 68 é o trigésimo nono elemento, [49] informa que o número 52 é o trigésimo nono elemento. 3.1.1 Usando [ ] - Subscribing ou indexing 3.1.1.1 Vetores Podemos extrapolar esta ideia de utilização de [] para acessar informações dentros dos objetos que criamos ou importamos. d&lt;-c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;) d ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; Posição 1 2 3 4 5 Elementos a b c d e No vector d temos cada um dos elementos em sua respectiva posição. Para acessar um elemento específico podemos inserir o número refere à sua posição dentro de []. Por exemplo: d[1] ## [1] &quot;a&quot; d[2] ## [1] &quot;b&quot; d[3] ## [1] &quot;c&quot; d[4] ## [1] &quot;d&quot; d[5] ## [1] &quot;e&quot; Importante saber que [] é muito versátil. d[-1] # Acessa todos elementos exceto o primeiro ## [1] &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; d1&lt;-d[3] # Atribuir o(s) elemento(s) de um vetor a outro vetor, ou criar um novo objeto de elementos já de objetos já existentes d1 ## [1] &quot;c&quot; d[1:3] # Acessar um intervalo de elementos ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; d[3:5] ## [1] &quot;c&quot; &quot;d&quot; &quot;e&quot; d[c(1,3:5)] # Acessar utilizando combinações ## [1] &quot;a&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; d[c(-2,-4)] # Exceto o segundo e quanto elementos ## [1] &quot;a&quot; &quot;c&quot; &quot;e&quot; d[-3:-5] # Exceto o intervalo entre 3 e 5 ## [1] &quot;a&quot; &quot;b&quot; Vamos dar mais uma olhada na importância do []. Considere os seguintes vetores. Posição 1 2 3 4 5 6 7 8 9 10 Elemento 50 34 11 7 24 631 20 4 7 21 Posição 1 2 3 4 5 6 7 8 9 10 Elemento 100 2 56 12 0 65 93 10 244 1 Vamos somar os dois vetores e observe que são adicionados o primeiro elemento com primeiro elemento, segundo elemento com segundo elemento e assim por diante. Em algumas outras linguagens se você quiser fazer esse procedimento, você vai provavelmente usar um loop. Mas em R você pode simplesmente adicioná-los. Esse é o motivo do R ser linguagem vetorizada. Você pode testar qualquer método matemático (soma, divisão, booleana, lógica). e&lt;-c(50,34,11,7,24,631,20,4,7,21) f&lt;-c(100,2,56,12,0,65,93,10,244,1) e;f ## [1] 50 34 11 7 24 631 20 4 7 21 ## [1] 100 2 56 12 0 65 93 10 244 1 e+f ## [1] 150 36 67 19 24 696 113 14 251 22 Neste caso funcionou tudo perfeitamente, pois nossos vetores são do mesmo tamanho. No entanto, caso tenhamos vetores de tamanho diferentes o R vai fazer um procedimento chamado recycling of vector. O R vai fazer com que os dois vetores se encaixarem no mesmo tamanho caso sejam múltiplos. Basicamente, o R vai copiar os elementos do começo do vetor menor e adicionar ao seu fim até que fiqque do mesmo tamanho do outro vetor para, então, fazer a operação. Posição 1 2 3 4 5 Elemento 50 34 11 7 24 Posição 1 2 3 4 5 6 7 8 9 10 Elemento 100 2 56 12 0 65 93 10 244 1 h&lt;-c( 50,34,11, 7,24) i&lt;-c(100, 2,56,12, 0,65,93,10,244,1) h+i ## [1] 150 36 67 19 24 115 127 21 251 25 h;i ## [1] 50 34 11 7 24 ## [1] 100 2 56 12 0 65 93 10 244 1 h+i ## [1] 150 36 67 19 24 115 127 21 251 25 E se não forem múltiplos? Nesse caso vamos ter uma aviso, em que o R ao fazer o preenchimento dos valores faltantes vai querer saber se está certo o que estamos fazendo e emitindo um warning. j&lt;-c(50,34,11,7,24,631) k&lt;-c(100,2,56,12,0,65,93,10,244,1) j+k ## Warning in j + k: longer object length is not a multiple of shorter object length ## [1] 150 36 67 19 24 696 143 44 255 8 3.1.1.2 Matrizes Da mesma forma que utilizamos [ ] para acessar elementos específicos em um vetor, estes podem ser utilizados para acessar elementos de matrizes. Lembrando que as matrizes possuem duas dimensões e que as dimensões são organizadas na sequência de linhas e colunas. l&lt;-cbind(matrix(14:1, ncol=2),matrix(1:14, ncol=2)) l ## [,1] [,2] [,3] [,4] ## [1,] 14 7 1 8 ## [2,] 13 6 2 9 ## [3,] 12 5 3 10 ## [4,] 11 4 4 11 ## [5,] 10 3 5 12 ## [6,] 9 2 6 13 ## [7,] 8 1 7 14 As linhas e colunas [linhas, colunas] são numeradas sequencialmente [x...n,y] e [x,y...n]. Podemos desta forma selecionar uma ou várias linhas e colunas de uma só vez. Para isto basta apenas numerar a linhas ou coluna requerida. l[1,] # Apenas a primeira linhas ## [1] 14 7 1 8 l[,1] # Apenas a primeira coluna ## [1] 14 13 12 11 10 9 8 l[1:3,] # O intervalo de linhas entre 1 a 3 ## [,1] [,2] [,3] [,4] ## [1,] 14 7 1 8 ## [2,] 13 6 2 9 ## [3,] 12 5 3 10 l[,1:3] # O intervalo de colunas entre 1 e 3 ## [,1] [,2] [,3] ## [1,] 14 7 1 ## [2,] 13 6 2 ## [3,] 12 5 3 ## [4,] 11 4 4 ## [5,] 10 3 5 ## [6,] 9 2 6 ## [7,] 8 1 7 l[-3,] # Exceto a terceira linha ## [,1] [,2] [,3] [,4] ## [1,] 14 7 1 8 ## [2,] 13 6 2 9 ## [3,] 11 4 4 11 ## [4,] 10 3 5 12 ## [5,] 9 2 6 13 ## [6,] 8 1 7 14 l[,-3] # Exceto a terceira coluna ## [,1] [,2] [,3] ## [1,] 14 7 8 ## [2,] 13 6 9 ## [3,] 12 5 10 ## [4,] 11 4 11 ## [5,] 10 3 12 ## [6,] 9 2 13 ## [7,] 8 1 14 l[-1:-3,] # Exceto o intervalo de linhas entre 1 a 3 ## [,1] [,2] [,3] [,4] ## [1,] 11 4 4 11 ## [2,] 10 3 5 12 ## [3,] 9 2 6 13 ## [4,] 8 1 7 14 l[,-1:-3] # Exceto o intervalo de colunas entre 1 e 3 ## [1] 8 9 10 11 12 13 14 Podemos também acessar elementos específicos de uma matriz definindo o endereço do elemento nas linhas e colunas. l[2,3] # Acessa apenas o elemento do cruzamento da linha 2 e coluna 3 ## [1] 2 Para facilitar a manipulação das matrizes podemos nomear as linas e colunas. Para isso podemos utilizar as funções colnames() e rownames(). nrow(l) # Retorna o número de linhas ## [1] 7 ncol(l) # Retorna o número de colunas ## [1] 4 dim(l) # Retorna as dimnesões (n° de linas e colunas) ## [1] 7 4 l ## [,1] [,2] [,3] [,4] ## [1,] 14 7 1 8 ## [2,] 13 6 2 9 ## [3,] 12 5 3 10 ## [4,] 11 4 4 11 ## [5,] 10 3 5 12 ## [6,] 9 2 6 13 ## [7,] 8 1 7 14 rownames(l)&lt;-letters[1:7] # Atribui 7 letras minúsculas sequenciais de &quot;a&quot; até &quot;g&quot; como nomes das linhas l ## [,1] [,2] [,3] [,4] ## a 14 7 1 8 ## b 13 6 2 9 ## c 12 5 3 10 ## d 11 4 4 11 ## e 10 3 5 12 ## f 9 2 6 13 ## g 8 1 7 14 colnames(l)&lt;-LETTERS[1:ncol(l)] # Atribui letras maiúsculas sequenciais obedecendo o número de colunas como nomes das colunas l ## A B C D ## a 14 7 1 8 ## b 13 6 2 9 ## c 12 5 3 10 ## d 11 4 4 11 ## e 10 3 5 12 ## f 9 2 6 13 ## g 8 1 7 14 Agora podemos acessar via nomes das linhas e colunas também. l[&quot;a&quot;,] # Apenas a primeira linhas ## A B C D ## 14 7 1 8 l[,&quot;A&quot;] # Apenas a primeira coluna ## a b c d e f g ## 14 13 12 11 10 9 8 l[letters[1:3],] # O intervalo de linhas entre &quot;a&quot; a &quot;c&quot; ## A B C D ## a 14 7 1 8 ## b 13 6 2 9 ## c 12 5 3 10 l[,LETTERS[1:3]] # O intervalo de colunas entre &quot;A&quot; e &quot;C&quot; ## A B C ## a 14 7 1 ## b 13 6 2 ## c 12 5 3 ## d 11 4 4 ## e 10 3 5 ## f 9 2 6 ## g 8 1 7 l[c(&quot;a&quot;,&quot;c&quot;,&quot;d&quot;),] # Seleciona as linhas &quot;a&quot;, &quot;c&quot; e &quot;d&quot; ## A B C D ## a 14 7 1 8 ## c 12 5 3 10 ## d 11 4 4 11 l[,c(&quot;A&quot;,&quot;C&quot;,&quot;D&quot;)] # Seleciona as colunas &quot;a&quot;, &quot;c&quot; e &quot;d&quot; ## A C D ## a 14 1 8 ## b 13 2 9 ## c 12 3 10 ## d 11 4 11 ## e 10 5 12 ## f 9 6 13 ## g 8 7 14 3.1.1.3 Arrays Sendo muito similares aos vetores e matrizes, os arrays podem ter n dimensões. m&lt;-1:24 dim(m)&lt;-c(4,3,2) m ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 13 17 21 ## [2,] 14 18 22 ## [3,] 15 19 23 ## [4,] 16 20 24 # ou m&lt;-array(1:24,c(4,3,2)) m ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 13 17 21 ## [2,] 14 18 22 ## [3,] 15 19 23 ## [4,] 16 20 24 m[1,,] # Retorna as primeiras linhas do array ## [,1] [,2] ## [1,] 1 13 ## [2,] 5 17 ## [3,] 9 21 m[,2,] # Retorna as segundas colunas do array ## [,1] [,2] ## [1,] 5 17 ## [2,] 6 18 ## [3,] 7 19 ## [4,] 8 20 m[1,2,] # Retorna as intersecções entre as primeiras linhas com as segundas colunas ## [1] 5 17 m[1,2,2] # Retorna as intersecções entre a primeira linha com segunda coluna da sugunda camada ## [1] 17 3.1.1.4 Data Frame Sendo semelhantes às matrizes, os data frames pode serm acessados pelo número das linhas ou colunas. Equipes&lt;-c(&quot;Flamengo&quot;, &quot;Santos&quot;, &quot;Palmeiras&quot;, &quot;Grêmio&quot;, &quot;Athletico Paranaense&quot;, &quot;So Paulo&quot;, &quot;Internacional&quot;, &quot;Corinthians&quot;, &quot;Fortaleza&quot;, &quot;Goiás&quot;, &quot;Bahia&quot;, &quot;Vasco da Gama&quot;, &quot;Atlético Mineiro&quot;, &quot;Fluminense&quot;, &quot;Botafogo&quot;, &quot;Ceará&quot;, &quot;Cruzeiro&quot;, &quot;CSA&quot;, &quot;Chapecoense&quot;, &quot;Avaí&quot;) Jogos&lt;-c(&quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;, &quot;38&quot;) Vitórias&lt;-c(&quot;28&quot;, &quot;22&quot;, &quot;21&quot;, &quot;19&quot;, &quot;18&quot;, &quot;17&quot;, &quot;16&quot;, &quot;14&quot;, &quot;15&quot;, &quot;15&quot;, &quot;12&quot;, &quot;12&quot;, &quot;13&quot;, &quot;12&quot;, &quot;13&quot;, &quot;10&quot;, &quot;7&quot;, &quot;8&quot;, &quot;7&quot;, &quot;3&quot;) Empates&lt;-c(&quot;6&quot;, &quot;8&quot;, &quot;11&quot;, &quot;8&quot;, &quot;10&quot;, &quot;12&quot;, &quot;9&quot;, &quot;14&quot;, &quot;8&quot;, &quot;7&quot;, &quot;13&quot;, &quot;13&quot;, &quot;9&quot;, &quot;10&quot;, &quot;4&quot;, &quot;9&quot;, &quot;15&quot;, &quot;8&quot;, &quot;11&quot;, &quot;11&quot;) Derrotas&lt;-c(&quot;4&quot;, &quot;8&quot;, &quot;6&quot;, &quot;11&quot;, &quot;10&quot;, &quot;9&quot;, &quot;13&quot;, &quot;10&quot;, &quot;15&quot;, &quot;16&quot;, &quot;13&quot;, &quot;13&quot;, &quot;16&quot;, &quot;16&quot;, &quot;21&quot;, &quot;19&quot;, &quot;16&quot;, &quot;22&quot;, &quot;20&quot;, &quot;24&quot;) Gols.Pró&lt;-c(&quot;86&quot;, &quot;60&quot;, &quot;61&quot;, &quot;64&quot;, &quot;51&quot;, &quot;39&quot;, &quot;44&quot;, &quot;42&quot;, &quot;50&quot;, &quot;46&quot;, &quot;44&quot;, &quot;39&quot;, &quot;45&quot;, &quot;38&quot;, &quot;31&quot;, &quot;36&quot;, &quot;27&quot;, &quot;24&quot;, &quot;31&quot;, &quot;18&quot;) Gols.Contra&lt;-c(&quot;37&quot;, &quot;33&quot;, &quot;32&quot;, &quot;39&quot;, &quot;32&quot;, &quot;30&quot;, &quot;39&quot;, &quot;34&quot;, &quot;49&quot;, &quot;64&quot;, &quot;43&quot;, &quot;45&quot;, &quot;49&quot;, &quot;46&quot;, &quot;45&quot;, &quot;41&quot;, &quot;46&quot;, &quot;58&quot;, &quot;52&quot;, &quot;62&quot;) Pontos&lt;-c(&quot;90&quot;, &quot;74&quot;, &quot;74&quot;, &quot;65&quot;, &quot;64&quot;, &quot;63&quot;, &quot;57&quot;, &quot;56&quot;, &quot;53&quot;, &quot;52&quot;, &quot;49&quot;, &quot;49&quot;, &quot;48&quot;, &quot;46&quot;, &quot;43&quot;, &quot;39&quot;, &quot;36&quot;, &quot;32&quot;, &quot;32&quot;, &quot;20&quot;) Saldo.de.Gols&lt;-c(&quot;49&quot;, &quot;27&quot;, &quot;29&quot;, &quot;25&quot;, &quot;19&quot;, &quot;9&quot;, &quot;5&quot;, &quot;8&quot;, &quot;1&quot;, &quot;-18&quot;, &quot;1&quot;, &quot;-6&quot;, &quot;-4&quot;, &quot;-8&quot;, &quot;-14&quot;, &quot;-5&quot;, &quot;-19&quot;, &quot;-34&quot;, &quot;-21&quot;, &quot;-44&quot;) Aprov.&lt;-c(&quot;79&quot;, &quot;65&quot;, &quot;65&quot;, &quot;57&quot;, &quot;56&quot;, &quot;55&quot;, &quot;5&quot;, &quot;49&quot;, &quot;46&quot;, &quot;46&quot;, &quot;43&quot;, &quot;43&quot;, &quot;42&quot;, &quot;4&quot;, &quot;38&quot;, &quot;34&quot;, &quot;32&quot;, &quot;28&quot;, &quot;28&quot;, &quot;18&quot;) Destino&lt;-c(&quot;Libertadores&quot;, &quot;Libertadores&quot;, &quot;Libertadores&quot;, &quot;Libertadores&quot;, &quot;Libertadores&quot;, &quot;Libertadores&quot;, &quot;Libertadores&quot;, &quot;Libertadores&quot;, &quot;Sulamericana&quot;, &quot;Sulamericana&quot;, &quot;Sulamericana&quot;, &quot;Sulamericana&quot;, &quot;Sulamericana&quot;, &quot;Sulamericana&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;Rebaixado&quot;, &quot;Rebaixado&quot;, &quot;Rebaixado&quot;, &quot;Rebaixado&quot;) Campeonato.Brasileiro.2019&lt;-as.data.frame(cbind(Equipes,Jogos,Vitórias,Empates,Derrotas,Gols.Pró,Gols.Contra,Pontos,Saldo.de.Gols, Aprov., Destino)) Equipes Jogos Vitórias Empates Derrotas Gols Pró Gols Contra Pontos Saldo de Gols Aprov Destino Flamengo 38 28 6 4 86 37 90 49 79 Libertadores Santos 38 22 8 8 60 33 74 27 65 Libertadores Palmeiras 38 21 11 6 61 32 74 29 65 Libertadores Grêmio 38 19 8 11 64 39 65 25 57 Libertadores Athletico Paranaense 38 18 10 10 51 32 64 19 56 Libertadores Sao Paulo 38 17 12 9 39 30 63 9 55 Libertadores Internacional 38 16 9 13 44 39 57 5 5 Libertadores Corinthians 38 14 14 10 42 34 56 8 49 Libertadores Fortaleza 38 15 8 15 50 49 53 1 46 Sulamericana Goiás 38 15 7 16 46 64 52 -18 46 Sulamericana Bahia 38 12 13 13 44 43 49 1 43 Sulamericana Vasco da Gama 38 12 13 13 39 45 49 -6 43 Sulamericana Atlético Mineiro 38 13 9 16 45 49 48 -4 42 Sulamericana Fluminense 38 12 10 16 38 46 46 -8 4 Sulamericana Botafogo 38 13 4 21 31 45 43 -14 38 NA Ceará 38 10 9 19 36 41 39 -5 34 NA Cruzeiro 38 7 15 16 27 46 36 -19 32 Rebaixado CSA 38 8 8 22 24 58 32 -34 28 Rebaixado Chapecoense 38 7 11 20 31 52 32 -21 28 Rebaixado Avaí 38 3 11 24 18 62 20 -44 18 Rebaixado Campeonato.Brasileiro.2019[1,] # Retorna a primeira linha do data frame ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 1 Flamengo 38 28 6 4 86 37 90 ## Saldo.de.Gols Aprov. Destino ## 1 49 79 Libertadores Campeonato.Brasileiro.2019[,1] # Retorna a primeira coluna do data frame ## [1] &quot;Flamengo&quot; &quot;Santos&quot; &quot;Palmeiras&quot; ## [4] &quot;Grêmio&quot; &quot;Athletico Paranaense&quot; &quot;Sao Paulo&quot; ## [7] &quot;Internacional&quot; &quot;Corinthians&quot; &quot;Fortaleza&quot; ## [10] &quot;Goiás&quot; &quot;Bahia&quot; &quot;Vasco da Gama&quot; ## [13] &quot;Atlético Mineiro&quot; &quot;Fluminense&quot; &quot;Botafogo&quot; ## [16] &quot;Ceará&quot; &quot;Cruzeiro&quot; &quot;CSA&quot; ## [19] &quot;Chapecoense&quot; &quot;Avaí&quot; Todas as outras combinações utilizadas nas matrizes podem ser utilizadas aqui nos data frames. No entanto, os data frames possuem uma outra vantagem sobre as matrizes. Além de armazenar elementos de diferentes tipos (numeric, character, logical e etc), eles também podemser acessados utilizando $. Campeonato.Brasileiro.2019$Equipes # Retorna os elementos da coluna &quot;Equipes&quot; ## [1] &quot;Flamengo&quot; &quot;Santos&quot; &quot;Palmeiras&quot; ## [4] &quot;Grêmio&quot; &quot;Athletico Paranaense&quot; &quot;Sao Paulo&quot; ## [7] &quot;Internacional&quot; &quot;Corinthians&quot; &quot;Fortaleza&quot; ## [10] &quot;Goiás&quot; &quot;Bahia&quot; &quot;Vasco da Gama&quot; ## [13] &quot;Atlético Mineiro&quot; &quot;Fluminense&quot; &quot;Botafogo&quot; ## [16] &quot;Ceará&quot; &quot;Cruzeiro&quot; &quot;CSA&quot; ## [19] &quot;Chapecoense&quot; &quot;Avaí&quot; Campeonato.Brasileiro.2019$Vitórias # Retorna os elementos da coluna &quot;Vitórias&quot; ## [1] &quot;28&quot; &quot;22&quot; &quot;21&quot; &quot;19&quot; &quot;18&quot; &quot;17&quot; &quot;16&quot; &quot;14&quot; &quot;15&quot; &quot;15&quot; &quot;12&quot; &quot;12&quot; &quot;13&quot; &quot;12&quot; &quot;13&quot; ## [16] &quot;10&quot; &quot;7&quot; &quot;8&quot; &quot;7&quot; &quot;3&quot; Campeonato.Brasileiro.2019$Gols.Pró # Retorna os elementos da coluna &quot;Gols.Pró&quot; ## [1] &quot;86&quot; &quot;60&quot; &quot;61&quot; &quot;64&quot; &quot;51&quot; &quot;39&quot; &quot;44&quot; &quot;42&quot; &quot;50&quot; &quot;46&quot; &quot;44&quot; &quot;39&quot; &quot;45&quot; &quot;38&quot; &quot;31&quot; ## [16] &quot;36&quot; &quot;27&quot; &quot;24&quot; &quot;31&quot; &quot;18&quot; Campeonato.Brasileiro.2019$Saldo.de.Gols # Retorna os elementos da coluna &quot;Saldo.de.Gols&quot; ## [1] &quot;49&quot; &quot;27&quot; &quot;29&quot; &quot;25&quot; &quot;19&quot; &quot;9&quot; &quot;5&quot; &quot;8&quot; &quot;1&quot; &quot;-18&quot; &quot;1&quot; &quot;-6&quot; &quot;-4&quot; ## [14] &quot;-8&quot; &quot;-14&quot; &quot;-5&quot; &quot;-19&quot; &quot;-34&quot; &quot;-21&quot; &quot;-44&quot; Campeonato.Brasileiro.2019$Destino # Retorna os elementos da coluna &quot;Destino&quot; ## [1] &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Libertadores&quot; ## [6] &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Sulamericana&quot; &quot;Sulamericana&quot; ## [11] &quot;Sulamericana&quot; &quot;Sulamericana&quot; &quot;Sulamericana&quot; &quot;Sulamericana&quot; &quot;NA&quot; ## [16] &quot;NA&quot; &quot;Rebaixado&quot; &quot;Rebaixado&quot; &quot;Rebaixado&quot; &quot;Rebaixado&quot; Campeonato.Brasileiro.2019$Equipes[2] # Retorna o segundo elemento da coluna &quot;Nome&quot; ## [1] &quot;Santos&quot; Campeonato.Brasileiro.2019$Vitórias[5] # Retorna o quinto elemento da coluna &quot;Vitórias&quot; ## [1] &quot;18&quot; Campeonato.Brasileiro.2019$Gols.Pró[3] # Retorna os elementos da coluna &quot;Gols.Pró&quot; ## [1] &quot;61&quot; Campeonato.Brasileiro.2019$Saldo.de.Gols[1] # Retorna os elementos da coluna &quot;Nivel.deR&quot; ## [1] &quot;49&quot; Campeonato.Brasileiro.2019$Destino[10] # Retorna os elementos da décima coluna &quot;Destino&quot; ## [1] &quot;Sulamericana&quot; Outra maneira de acessar informações pode através []. Campeonato.Brasileiro.2019[Campeonato.Brasileiro.2019$Equipes==&quot;Flamengo&quot;,] # Retorna apenas as informações da coluna &quot;Equipes&quot; que atendem o critério &quot;Flamengo&quot; ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 1 Flamengo 38 28 6 4 86 37 90 ## Saldo.de.Gols Aprov. Destino ## 1 49 79 Libertadores split(Campeonato.Brasileiro.2019,Destino) # Retorna apenas as informações da coluna &quot;Destino&quot; ## $Libertadores ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra ## 1 Flamengo 38 28 6 4 86 37 ## 2 Santos 38 22 8 8 60 33 ## 3 Palmeiras 38 21 11 6 61 32 ## 4 Grêmio 38 19 8 11 64 39 ## 5 Athletico Paranaense 38 18 10 10 51 32 ## 6 Sao Paulo 38 17 12 9 39 30 ## 7 Internacional 38 16 9 13 44 39 ## 8 Corinthians 38 14 14 10 42 34 ## Pontos Saldo.de.Gols Aprov. Destino ## 1 90 49 79 Libertadores ## 2 74 27 65 Libertadores ## 3 74 29 65 Libertadores ## 4 65 25 57 Libertadores ## 5 64 19 56 Libertadores ## 6 63 9 55 Libertadores ## 7 57 5 5 Libertadores ## 8 56 8 49 Libertadores ## ## $`NA` ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 15 Botafogo 38 13 4 21 31 45 43 ## 16 Ceará 38 10 9 19 36 41 39 ## Saldo.de.Gols Aprov. Destino ## 15 -14 38 NA ## 16 -5 34 NA ## ## $Rebaixado ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 17 Cruzeiro 38 7 15 16 27 46 36 ## 18 CSA 38 8 8 22 24 58 32 ## 19 Chapecoense 38 7 11 20 31 52 32 ## 20 Avaí 38 3 11 24 18 62 20 ## Saldo.de.Gols Aprov. Destino ## 17 -19 32 Rebaixado ## 18 -34 28 Rebaixado ## 19 -21 28 Rebaixado ## 20 -44 18 Rebaixado ## ## $Sulamericana ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 9 Fortaleza 38 15 8 15 50 49 53 ## 10 Goiás 38 15 7 16 46 64 52 ## 11 Bahia 38 12 13 13 44 43 49 ## 12 Vasco da Gama 38 12 13 13 39 45 49 ## 13 Atlético Mineiro 38 13 9 16 45 49 48 ## 14 Fluminense 38 12 10 16 38 46 46 ## Saldo.de.Gols Aprov. Destino ## 9 1 46 Sulamericana ## 10 -18 46 Sulamericana ## 11 1 43 Sulamericana ## 12 -6 43 Sulamericana ## 13 -4 42 Sulamericana ## 14 -8 4 Sulamericana Vou criar alguns verores aleatórios. gr1 &lt;- rep(letters[1:4],each=5) gr1 ## [1] &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; ## [20] &quot;d&quot; gr2 &lt;- c(rep(1:2,each=5),rep(2:3,each=5)) gr2 ## [1] 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 fc1 &lt;- factor(rep(letters[1:4],each=5)) fc1 ## [1] a a a a a b b b b b c c c c c d d d d d ## Levels: a b c d fc2 &lt;- factor(c(rep(1:2,each=5),rep(2:3,each=5))) fc2 ## [1] 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 ## Levels: 1 2 3 split(Campeonato.Brasileiro.2019,f=(gr1)) # Divide o Campeonato.Brasileiro.2019 de acordo com os vetores informados ## $a ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra ## 1 Flamengo 38 28 6 4 86 37 ## 2 Santos 38 22 8 8 60 33 ## 3 Palmeiras 38 21 11 6 61 32 ## 4 Grêmio 38 19 8 11 64 39 ## 5 Athletico Paranaense 38 18 10 10 51 32 ## Pontos Saldo.de.Gols Aprov. Destino ## 1 90 49 79 Libertadores ## 2 74 27 65 Libertadores ## 3 74 29 65 Libertadores ## 4 65 25 57 Libertadores ## 5 64 19 56 Libertadores ## ## $b ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 6 Sao Paulo 38 17 12 9 39 30 63 ## 7 Internacional 38 16 9 13 44 39 57 ## 8 Corinthians 38 14 14 10 42 34 56 ## 9 Fortaleza 38 15 8 15 50 49 53 ## 10 Goiás 38 15 7 16 46 64 52 ## Saldo.de.Gols Aprov. Destino ## 6 9 55 Libertadores ## 7 5 5 Libertadores ## 8 8 49 Libertadores ## 9 1 46 Sulamericana ## 10 -18 46 Sulamericana ## ## $c ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 11 Bahia 38 12 13 13 44 43 49 ## 12 Vasco da Gama 38 12 13 13 39 45 49 ## 13 Atlético Mineiro 38 13 9 16 45 49 48 ## 14 Fluminense 38 12 10 16 38 46 46 ## 15 Botafogo 38 13 4 21 31 45 43 ## Saldo.de.Gols Aprov. Destino ## 11 1 43 Sulamericana ## 12 -6 43 Sulamericana ## 13 -4 42 Sulamericana ## 14 -8 4 Sulamericana ## 15 -14 38 NA ## ## $d ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 16 Ceará 38 10 9 19 36 41 39 ## 17 Cruzeiro 38 7 15 16 27 46 36 ## 18 CSA 38 8 8 22 24 58 32 ## 19 Chapecoense 38 7 11 20 31 52 32 ## 20 Avaí 38 3 11 24 18 62 20 ## Saldo.de.Gols Aprov. Destino ## 16 -5 34 NA ## 17 -19 32 Rebaixado ## 18 -34 28 Rebaixado ## 19 -21 28 Rebaixado ## 20 -44 18 Rebaixado split(Campeonato.Brasileiro.2019,f=(gr2)) # Divide o Campeonato.Brasileiro.2019 de acordo com os vetores informados ## $`1` ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra ## 1 Flamengo 38 28 6 4 86 37 ## 2 Santos 38 22 8 8 60 33 ## 3 Palmeiras 38 21 11 6 61 32 ## 4 Grêmio 38 19 8 11 64 39 ## 5 Athletico Paranaense 38 18 10 10 51 32 ## Pontos Saldo.de.Gols Aprov. Destino ## 1 90 49 79 Libertadores ## 2 74 27 65 Libertadores ## 3 74 29 65 Libertadores ## 4 65 25 57 Libertadores ## 5 64 19 56 Libertadores ## ## $`2` ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 6 Sao Paulo 38 17 12 9 39 30 63 ## 7 Internacional 38 16 9 13 44 39 57 ## 8 Corinthians 38 14 14 10 42 34 56 ## 9 Fortaleza 38 15 8 15 50 49 53 ## 10 Goiás 38 15 7 16 46 64 52 ## 11 Bahia 38 12 13 13 44 43 49 ## 12 Vasco da Gama 38 12 13 13 39 45 49 ## 13 Atlético Mineiro 38 13 9 16 45 49 48 ## 14 Fluminense 38 12 10 16 38 46 46 ## 15 Botafogo 38 13 4 21 31 45 43 ## Saldo.de.Gols Aprov. Destino ## 6 9 55 Libertadores ## 7 5 5 Libertadores ## 8 8 49 Libertadores ## 9 1 46 Sulamericana ## 10 -18 46 Sulamericana ## 11 1 43 Sulamericana ## 12 -6 43 Sulamericana ## 13 -4 42 Sulamericana ## 14 -8 4 Sulamericana ## 15 -14 38 NA ## ## $`3` ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 16 Ceará 38 10 9 19 36 41 39 ## 17 Cruzeiro 38 7 15 16 27 46 36 ## 18 CSA 38 8 8 22 24 58 32 ## 19 Chapecoense 38 7 11 20 31 52 32 ## 20 Avaí 38 3 11 24 18 62 20 ## Saldo.de.Gols Aprov. Destino ## 16 -5 34 NA ## 17 -19 32 Rebaixado ## 18 -34 28 Rebaixado ## 19 -21 28 Rebaixado ## 20 -44 18 Rebaixado split(Campeonato.Brasileiro.2019,f=list(gr1,gr2), drop = TRUE, sep = &quot;: &quot;) # Divide o Campeonato.Brasileiro.2019 de acordo com as listas informadas ## $`a: 1` ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra ## 1 Flamengo 38 28 6 4 86 37 ## 2 Santos 38 22 8 8 60 33 ## 3 Palmeiras 38 21 11 6 61 32 ## 4 Grêmio 38 19 8 11 64 39 ## 5 Athletico Paranaense 38 18 10 10 51 32 ## Pontos Saldo.de.Gols Aprov. Destino ## 1 90 49 79 Libertadores ## 2 74 27 65 Libertadores ## 3 74 29 65 Libertadores ## 4 65 25 57 Libertadores ## 5 64 19 56 Libertadores ## ## $`b: 2` ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 6 Sao Paulo 38 17 12 9 39 30 63 ## 7 Internacional 38 16 9 13 44 39 57 ## 8 Corinthians 38 14 14 10 42 34 56 ## 9 Fortaleza 38 15 8 15 50 49 53 ## 10 Goiás 38 15 7 16 46 64 52 ## Saldo.de.Gols Aprov. Destino ## 6 9 55 Libertadores ## 7 5 5 Libertadores ## 8 8 49 Libertadores ## 9 1 46 Sulamericana ## 10 -18 46 Sulamericana ## ## $`c: 2` ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 11 Bahia 38 12 13 13 44 43 49 ## 12 Vasco da Gama 38 12 13 13 39 45 49 ## 13 Atlético Mineiro 38 13 9 16 45 49 48 ## 14 Fluminense 38 12 10 16 38 46 46 ## 15 Botafogo 38 13 4 21 31 45 43 ## Saldo.de.Gols Aprov. Destino ## 11 1 43 Sulamericana ## 12 -6 43 Sulamericana ## 13 -4 42 Sulamericana ## 14 -8 4 Sulamericana ## 15 -14 38 NA ## ## $`d: 3` ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra Pontos ## 16 Ceará 38 10 9 19 36 41 39 ## 17 Cruzeiro 38 7 15 16 27 46 36 ## 18 CSA 38 8 8 22 24 58 32 ## 19 Chapecoense 38 7 11 20 31 52 32 ## 20 Avaí 38 3 11 24 18 62 20 ## Saldo.de.Gols Aprov. Destino ## 16 -5 34 NA ## 17 -19 32 Rebaixado ## 18 -34 28 Rebaixado ## 19 -21 28 Rebaixado ## 20 -44 18 Rebaixado Alterando elementos dentro do data frame. Campeonato.Brasileiro.2019$Destino # Retorna apenas as informações da coluna &quot;Destino&quot; ## [1] &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Libertadores&quot; ## [6] &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Libertadores&quot; &quot;Sulamericana&quot; &quot;Sulamericana&quot; ## [11] &quot;Sulamericana&quot; &quot;Sulamericana&quot; &quot;Sulamericana&quot; &quot;Sulamericana&quot; &quot;NA&quot; ## [16] &quot;NA&quot; &quot;Rebaixado&quot; &quot;Rebaixado&quot; &quot;Rebaixado&quot; &quot;Rebaixado&quot; Campeonato.Brasileiro.2019$Destino[Campeonato.Brasileiro.2019$Destino==&quot;NA&quot;]&lt;-&quot;Lugar Algum&quot; # Substitui &quot;Libertadores&quot; na coluna &quot;Destino&quot; por &quot;Liberta&quot;. Veja como ficou com a informação alterada. Equipes Jogos Vitórias Empates Derrotas Gols Pró Gols Contra Pontos Saldo de Gols Aprov Destino Flamengo 38 28 6 4 86 37 90 49 79 Libertadores Santos 38 22 8 8 60 33 74 27 65 Libertadores Palmeiras 38 21 11 6 61 32 74 29 65 Libertadores Grêmio 38 19 8 11 64 39 65 25 57 Libertadores Athletico Paranaense 38 18 10 10 51 32 64 19 56 Libertadores Sao Paulo 38 17 12 9 39 30 63 9 55 Libertadores Internacional 38 16 9 13 44 39 57 5 5 Libertadores Corinthians 38 14 14 10 42 34 56 8 49 Libertadores Fortaleza 38 15 8 15 50 49 53 1 46 Sulamericana Goiás 38 15 7 16 46 64 52 -18 46 Sulamericana Bahia 38 12 13 13 44 43 49 1 43 Sulamericana Vasco da Gama 38 12 13 13 39 45 49 -6 43 Sulamericana Atlético Mineiro 38 13 9 16 45 49 48 -4 42 Sulamericana Fluminense 38 12 10 16 38 46 46 -8 4 Sulamericana Botafogo 38 13 4 21 31 45 43 -14 38 Lugar Algum Ceará 38 10 9 19 36 41 39 -5 34 Lugar Algum Cruzeiro 38 7 15 16 27 46 36 -19 32 Rebaixado CSA 38 8 8 22 24 58 32 -34 28 Rebaixado Chapecoense 38 7 11 20 31 52 32 -21 28 Rebaixado Avaí 38 3 11 24 18 62 20 -44 18 Rebaixado Vamos expurgar remover o Vasco da Gama da nossa lista. Campeonato.Brasileiro.2019$Equipes # Retorna apenas as informações da coluna &quot;Equipes&quot; ## [1] &quot;Flamengo&quot; &quot;Santos&quot; &quot;Palmeiras&quot; ## [4] &quot;Grêmio&quot; &quot;Athletico Paranaense&quot; &quot;Sao Paulo&quot; ## [7] &quot;Internacional&quot; &quot;Corinthians&quot; &quot;Fortaleza&quot; ## [10] &quot;Goiás&quot; &quot;Bahia&quot; &quot;Vasco da Gama&quot; ## [13] &quot;Atlético Mineiro&quot; &quot;Fluminense&quot; &quot;Botafogo&quot; ## [16] &quot;Ceará&quot; &quot;Cruzeiro&quot; &quot;CSA&quot; ## [19] &quot;Chapecoense&quot; &quot;Avaí&quot; Campeonato.Brasileiro.2019[Campeonato.Brasileiro.2019$Equipes!=&quot;Vasco da Gama&quot;,] #Seleciona tudo exceto aquilo que for de &quot;Grêmio&quot; ## Equipes Jogos Vitórias Empates Derrotas Gols.Pró Gols.Contra ## 1 Flamengo 38 28 6 4 86 37 ## 2 Santos 38 22 8 8 60 33 ## 3 Palmeiras 38 21 11 6 61 32 ## 4 Grêmio 38 19 8 11 64 39 ## 5 Athletico Paranaense 38 18 10 10 51 32 ## 6 Sao Paulo 38 17 12 9 39 30 ## 7 Internacional 38 16 9 13 44 39 ## 8 Corinthians 38 14 14 10 42 34 ## 9 Fortaleza 38 15 8 15 50 49 ## 10 Goiás 38 15 7 16 46 64 ## 11 Bahia 38 12 13 13 44 43 ## 13 Atlético Mineiro 38 13 9 16 45 49 ## 14 Fluminense 38 12 10 16 38 46 ## 15 Botafogo 38 13 4 21 31 45 ## 16 Ceará 38 10 9 19 36 41 ## 17 Cruzeiro 38 7 15 16 27 46 ## 18 CSA 38 8 8 22 24 58 ## 19 Chapecoense 38 7 11 20 31 52 ## 20 Avaí 38 3 11 24 18 62 ## Pontos Saldo.de.Gols Aprov. Destino ## 1 90 49 79 Libertadores ## 2 74 27 65 Libertadores ## 3 74 29 65 Libertadores ## 4 65 25 57 Libertadores ## 5 64 19 56 Libertadores ## 6 63 9 55 Libertadores ## 7 57 5 5 Libertadores ## 8 56 8 49 Libertadores ## 9 53 1 46 Sulamericana ## 10 52 -18 46 Sulamericana ## 11 49 1 43 Sulamericana ## 13 48 -4 42 Sulamericana ## 14 46 -8 4 Sulamericana ## 15 43 -14 38 Lugar Algum ## 16 39 -5 34 Lugar Algum ## 17 36 -19 32 Rebaixado ## 18 32 -34 28 Rebaixado ## 19 32 -21 28 Rebaixado ## 20 20 -44 18 Rebaixado Equipes Jogos Vitórias Empates Derrotas Gols Pró Gols Contra Pontos Saldo de Gols Aprov Destino Flamengo 38 28 6 4 86 37 90 49 79 Libertadores Santos 38 22 8 8 60 33 74 27 65 Libertadores Palmeiras 38 21 11 6 61 32 74 29 65 Libertadores Grêmio 38 19 8 11 64 39 65 25 57 Libertadores Athletico Paranaense 38 18 10 10 51 32 64 19 56 Libertadores Sao Paulo 38 17 12 9 39 30 63 9 55 Libertadores Internacional 38 16 9 13 44 39 57 5 5 Libertadores Corinthians 38 14 14 10 42 34 56 8 49 Libertadores Fortaleza 38 15 8 15 50 49 53 1 46 Sulamericana Goiás 38 15 7 16 46 64 52 -18 46 Sulamericana Bahia 38 12 13 13 44 43 49 1 43 Sulamericana Vasco da Gama 38 12 13 13 39 45 49 -6 43 Sulamericana Atlético Mineiro 38 13 9 16 45 49 48 -4 42 Sulamericana Fluminense 38 12 10 16 38 46 46 -8 4 Sulamericana Botafogo 38 13 4 21 31 45 43 -14 38 Lugar Algum Ceará 38 10 9 19 36 41 39 -5 34 Lugar Algum Cruzeiro 38 7 15 16 27 46 36 -19 32 Rebaixado CSA 38 8 8 22 24 58 32 -34 28 Rebaixado Chapecoense 38 7 11 20 31 52 32 -21 28 Rebaixado Avaí 38 3 11 24 18 62 20 -44 18 Rebaixado Atendendo a pedidos, vamos continuar brevemente com manipulação de dados em data.frame. As funções grep, grepl, regexpr, gregexpr e regexec busca por elementos de um objeto que coincidem com um argumento padrão. 3.1.2 grep() grep(&quot;Lugar Algum&quot;, Campeonato.Brasileiro.2019$Destino) # retorna as posições de tudo no vetor Campeonato.Brasileiro.2019$Destino que coincide com Lugar Algum ## [1] 15 16 grep(&quot;Libetadores|Lugar Algum&quot;, Campeonato.Brasileiro.2019$Destino) # retorna as posições de tudo no vetor Campeonato.Brasileiro.2019$Destino que coincide com Libetadores ou Lugar Algum ## [1] 15 16 grep(&quot;Lugar Algum&quot;, Campeonato.Brasileiro.2019$Destino) # retorna as posições de tudo no vetor Campeonato.Brasileiro.2019$Destino que coincide com Lugar Algum ## [1] 15 16 Campeonato.Brasileiro.2019$Destino[15]&lt;-&quot;lugar algum&quot; #Substitui a 15ª posição por lugar algum&quot; Execute o comando grepanterior novamente e veja as diferenças. Equipes Jogos Vitórias Empates Derrotas Gols Pró Gols Contra Pontos Saldo de Gols Aprov Destino Flamengo 38 28 6 4 86 37 90 49 79 Libertadores Santos 38 22 8 8 60 33 74 27 65 Libertadores Palmeiras 38 21 11 6 61 32 74 29 65 Libertadores Grêmio 38 19 8 11 64 39 65 25 57 Libertadores Athletico Paranaense 38 18 10 10 51 32 64 19 56 Libertadores Sao Paulo 38 17 12 9 39 30 63 9 55 Libertadores Internacional 38 16 9 13 44 39 57 5 5 Libertadores Corinthians 38 14 14 10 42 34 56 8 49 Libertadores Fortaleza 38 15 8 15 50 49 53 1 46 Sulamericana Goiás 38 15 7 16 46 64 52 -18 46 Sulamericana Bahia 38 12 13 13 44 43 49 1 43 Sulamericana Vasco da Gama 38 12 13 13 39 45 49 -6 43 Sulamericana Atlético Mineiro 38 13 9 16 45 49 48 -4 42 Sulamericana Fluminense 38 12 10 16 38 46 46 -8 4 Sulamericana Botafogo 38 13 4 21 31 45 43 -14 38 lugar algum Ceará 38 10 9 19 36 41 39 -5 34 Lugar Algum Cruzeiro 38 7 15 16 27 46 36 -19 32 Rebaixado CSA 38 8 8 22 24 58 32 -34 28 Rebaixado Chapecoense 38 7 11 20 31 52 32 -21 28 Rebaixado Avaí 38 3 11 24 18 62 20 -44 18 Rebaixado grep(&quot;[L l]ugar [A a]lgum&quot;,Campeonato.Brasileiro.2019$Destino) # retorna as posições de tudo no vetor Campeonato.Brasileiro.2019$Destino que coincide com Lugar/lugar ou Algum/algum ## [1] 15 16 la &lt;-grep(&quot;lugar algum&quot;, Campeonato.Brasileiro.2019$Destino) LA &lt;- grep(&quot;Lugar Algum&quot;, Campeonato.Brasileiro.2019$Destino) str(la);str(LA) # mostra a estrutura de um objeto ## int 15 ## int 16 setdiff(la, LA) #Identifica a difença entre X e Y ## [1] 15 setdiff(LA, la) ## [1] 16 Campeonato.Brasileiro.2019$Equipes[1] ## [1] &quot;Flamengo&quot; grep(&quot;Flamengo&quot;, Campeonato.Brasileiro.2019$Equipes, value = TRUE) ## [1] &quot;Flamengo&quot; 3.1.3 grepl() grepl(&quot;Flamengo&quot;, Campeonato.Brasileiro.2019$Equipes) # Retorna valores lógicos de acordo com o critério estabelecido ## [1] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [14] FALSE FALSE FALSE FALSE FALSE FALSE FALSE 3.1.4 sub() e gsub() sub(&quot;Fla&quot;, &quot;fla&quot;, Campeonato.Brasileiro.2019$Equipes) #Substitui Fla por fla naquilo que começa com Fla ## [1] &quot;flamengo&quot; &quot;Santos&quot; &quot;Palmeiras&quot; ## [4] &quot;Grêmio&quot; &quot;Athletico Paranaense&quot; &quot;Sao Paulo&quot; ## [7] &quot;Internacional&quot; &quot;Corinthians&quot; &quot;Fortaleza&quot; ## [10] &quot;Goiás&quot; &quot;Bahia&quot; &quot;Vasco da Gama&quot; ## [13] &quot;Atlético Mineiro&quot; &quot;Fluminense&quot; &quot;Botafogo&quot; ## [16] &quot;Ceará&quot; &quot;Cruzeiro&quot; &quot;CSA&quot; ## [19] &quot;Chapecoense&quot; &quot;Avaí&quot; gsub(&quot;Atlé|Athle&quot;, &quot;Atlé&quot;, Campeonato.Brasileiro.2019$Equipes) #Substitui Atlé ou Athle por Atlé naquilo que contém com Atlé ou Athle ## [1] &quot;Flamengo&quot; &quot;Santos&quot; &quot;Palmeiras&quot; ## [4] &quot;Grêmio&quot; &quot;Atlético Paranaense&quot; &quot;Sao Paulo&quot; ## [7] &quot;Internacional&quot; &quot;Corinthians&quot; &quot;Fortaleza&quot; ## [10] &quot;Goiás&quot; &quot;Bahia&quot; &quot;Vasco da Gama&quot; ## [13] &quot;Atlético Mineiro&quot; &quot;Fluminense&quot; &quot;Botafogo&quot; ## [16] &quot;Ceará&quot; &quot;Cruzeiro&quot; &quot;CSA&quot; ## [19] &quot;Chapecoense&quot; &quot;Avaí&quot; Alguns elementos especiais podem ser encontrados no R como: Infinito positivo ou negativo (-Inf e Inf), elementos não número (NaN - Not a Number) e valores ausentes (NA, Not Available). 3/0 ## [1] Inf -3/0 ## [1] -Inf x&lt;-Inf;x ## [1] Inf y&lt;-(-Inf);y ## [1] -Inf 0/0 ## [1] NaN Inf-Inf ## [1] NaN Campeonato.Brasileiro.2019[Campeonato.Brasileiro.2019&lt;=10]&lt;-NA Equipes Jogos Vitórias Empates Derrotas Gols Pró Gols Contra Pontos Saldo de Gols Aprov Destino Flamengo 38 28 6 4 86 37 90 49 79 Libertadores Santos 38 22 8 8 60 33 74 27 65 Libertadores Palmeiras 38 21 11 6 61 32 74 29 65 Libertadores Grêmio 38 19 8 11 64 39 65 25 57 Libertadores Athletico Paranaense 38 18 NA NA 51 32 64 19 56 Libertadores Sao Paulo 38 17 12 9 39 30 63 9 55 Libertadores Internacional 38 16 9 13 44 39 57 5 5 Libertadores Corinthians 38 14 14 NA 42 34 56 8 49 Libertadores Fortaleza 38 15 8 15 50 49 53 NA 46 Sulamericana Goiás 38 15 7 16 46 64 52 NA 46 Sulamericana Bahia 38 12 13 13 44 43 49 NA 43 Sulamericana Vasco da Gama 38 12 13 13 39 45 49 NA 43 Sulamericana Atlético Mineiro 38 13 9 16 45 49 48 NA 42 Sulamericana Fluminense 38 12 NA 16 38 46 46 NA 4 Sulamericana Botafogo 38 13 4 21 31 45 43 NA 38 lugar algum Ceará 38 NA 9 19 36 41 39 NA 34 Lugar Algum Cruzeiro 38 7 15 16 27 46 36 NA 32 Rebaixado CSA 38 8 8 22 24 58 32 NA 28 Rebaixado Chapecoense 38 7 11 20 31 52 32 NA 28 Rebaixado Avaí 38 3 11 24 18 62 20 NA 18 Rebaixado any(is.na(Campeonato.Brasileiro.2019)) ## [1] TRUE Identificando onde estão os valores que atendem critérios desejados. which(is.na(Campeonato.Brasileiro.2019), arr.ind=TRUE) ## row col ## [1,] 16 3 ## [2,] 5 4 ## [3,] 14 4 ## [4,] 5 5 ## [5,] 8 5 ## [6,] 9 9 ## [7,] 10 9 ## [8,] 11 9 ## [9,] 12 9 ## [10,] 13 9 ## [11,] 14 9 ## [12,] 15 9 ## [13,] 16 9 ## [14,] 17 9 ## [15,] 18 9 ## [16,] 19 9 ## [17,] 20 9 which((Campeonato.Brasileiro.2019&lt;1), arr.ind=TRUE) ## row col 3.2 Operadores Assista este conteúdo em Cap 2 - Operadores no PVANet O R tem vários operadores, tais quais outras linguagens, que nos permitem realizar procedimentos aritiméticos, lógicos ou relacionais. Os operadores aritméticos atuam em 2 elementos (x e y) e retorna respostas lógicas. Estes elementos, pos sua vez, podem ser de modo (mode()) numéricos ou complexos e também variáveis lógicas. Símbolo Operação + adição - subtração * multiplicação / divisão ^ potência %% resto da divisão %/% divisão inteira x&lt;-2;y&lt;-3 x+y ## [1] 5 x-y ## [1] -1 x*y ## [1] 6 y/x ## [1] 1.5 y%/%x ## [1] 1 y%%x ## [1] 1 y^x ## [1] 9 Os operadores de comparações atuam em cada elemento de 2 objetos sob comparação (fazendo o recycling se necessário) retornando um objeto do mesmo tamanho. Símbolo Relação &lt; menor que &gt; maior que &lt;= menor ou igual &gt;= maior ou igual == igual != diferente x&lt;-1:3;y&lt;-1:3 x&gt;y ## [1] FALSE FALSE FALSE x&lt;y ## [1] FALSE FALSE FALSE x*y ## [1] 1 4 9 y&gt;=x ## [1] TRUE TRUE TRUE y&lt;=x ## [1] TRUE TRUE TRUE y==x ## [1] TRUE TRUE TRUE y!=x ## [1] FALSE FALSE FALSE Caso queira comparar bancos de dados completos, por inteiro de uma vez só, utilize identical(x,y) e all.equal(x,y). identicalfaz uma comparação estrita da representação dos objetos e retorna como TRUE ou FALSE. all.equal compara a igualdade próxima e retorna TRUE ou mostra as diferenças. x&lt;-0.9;y&lt;-0.9 identical(x,y) ## [1] TRUE identical(0.9, 1.1 - 0.2) ## [1] FALSE all.equal(x,y) ## [1] TRUE all.equal(0.9, 1.1 - 0.2, tolerance = 1e-16) ## [1] &quot;Mean relative difference: 1.233581e-16&quot; Operadores lógicos são utilizados para para testes lógicos entre 1 ou 2 objetos e retorna valores lógicos também. Símbolo Relação ! Logical NOT &amp; Logical AND or Exclusive OR Lembrando que temos outro operadores $, @, [, [[, :, ?, &lt;-, &lt;&lt;-, =, :: que já começamos a manipular. Existem dois tipos de pessoas: = &amp; &lt;- Com o passar do tempo vamos brincando com cada operador e, assim, assimilando o que cada uma faz. 3.2.1 Iterações 3.2.1.1 while() Essa forma de loop é menos comumente usada e potencialmente perigosa, uma vez que ela pode resultar em uma execução descontrolada. Por isso, em muitos casos iterações restritivas são mais adequadas. A função while() requer uma condição testável que continuará a resultar em declarações subsequentes a serem executadas até o resultado do teste dar falso (FALSE). Estrutura: Começa com a palavra while seguida por parênteses e colchetes while(){} A segunda parte vai dentro de parênteses e diz respeito a uma expressão lógica e a terceira parte, entre colchetes, o corpo do loop. while(abc){xyz} #Se abc for TRUE ele vai executar o resto {xyz}. Depois volta para checar se (abc) continua TRUE ou FALSE para decidir se continua no loop ou parar. while(condição){ Código a ser executado } Fonte: Guru99 Exemplo 1: Teste Ter aula na segunda-feira é bom ou não? while(FALSE){ print(&quot;Aula segunda-feira é ótimo!&quot;)} while(TRUE){ print(&quot;Aula segunda-feira é ótimo!&quot;)} Exemplo 2: Teste Num concurso de beleza Jackson desafiou qualquer um de seus alunos. Cada um recebeu uma nota. Jackson&lt;-9.5 Aluno&lt;-6 while(Aluno&lt;Jackson){ print(Jackson)} 3.2.1.2 for() É similar ao while(), mas é mais conveniente na maioria dos casos. Iterações restritas (loops) destinam-se a execução de um número fixo de vezes dos comandos usando a função for(). O loop é executado tantas vezes quanto variam os valores de i. Começa com a palavra for seguindo de por parênteses e colchetes  for(){}. () não especifica funções lógicas como no while, mas especifica as interações do loop. {} são usados para preencher com os comandos do loop for(i in conjunto_de_valores){ comandos que serão repetidos } Fonte:tutorialspoint for(i in 1:5){ print(&quot;Aula segunda-feira é ótimo!&quot;) } ## [1] &quot;Aula segunda-feira é ótimo!&quot; ## [1] &quot;Aula segunda-feira é ótimo!&quot; ## [1] &quot;Aula segunda-feira é ótimo!&quot; ## [1] &quot;Aula segunda-feira é ótimo!&quot; ## [1] &quot;Aula segunda-feira é ótimo!&quot; Significa que Aula segunda-feira é ótimo! Será mostrada 5 vezes sempre retornando como o objeto criado i. for(i in 1:5){ print((i+1)*3) } ## [1] 6 ## [1] 9 ## [1] 12 ## [1] 15 ## [1] 18 Não importa onde você começa ou o tipo de vetor que é (Caractere, número e etc). Basicamente toda vez que mudar ele vai executar o que estiver dentro do corpo do loop. 3.2.2 Condicionais 3.2.2.1 if, else A função if() é usado para conduzir uma ou mais declarações contidas dentro de [], fornecendo a condição dentro de (). Voltando para nosso concurso de beleza, temos um controle um pouco mais inteligente do resultado mostrado. Jackson&lt;-9.5 Aluno&lt;-6 if(Jackson&gt;Aluno){ print(&quot;Jackson é mais bonito que Aluno!&quot;) } ## [1] &quot;Jackson é mais bonito que Aluno!&quot; if(Aluno*2&gt;=Jackson){ print(&quot;Aluno é mais bonito!&quot;) } ## [1] &quot;Aluno é mais bonito!&quot; Adaptando a o código acima para fazer a declaração condicional FALSE simplesmente retorna nenhum comando no prompt uma vez que o código não disse como R deveria responder nesse caso. if(Aluno*2&gt;=Jackson^2){ print(&quot;Aluno é mais bonito!&quot;) } Existem 2 métodos de informar ao R como responder em casos onde a declaração de condição é retornada como FALSE: usando o modificador else ou a função ifelse(). Ao contrário de uma função qualquer, else não pode ser usado independentemente, mas apenas como um modificador (adição) ao if(). If no exemplo acima, o resultado é solicitado quando o valor retornado é FALSE, else pode ser adicionado como segue: if(Aluno*2&gt;=Jackson^2){ print(&quot;A declaração é verdadeira!&quot;) }else{ print(&quot;A declaração é falsa!&quot;) } ## [1] &quot;A declaração é falsa!&quot; Note que else foi escrito na mesma linha que conclui o if() para informar ao R que o teste condicional continua. Podemos retirar a segunda parte do teste anterior e adicionar uma nova comparação. Aluno2&lt;-7 if(Aluno2&gt;Jackson){ print(&quot;Aluno1 é mais bonito!&quot;) }else if(Aluno2&gt;Aluno){ print(&quot;Aluno2 é mais bonito que Aluno e menos bonito que Jackson.&quot;) } ## [1] &quot;Aluno2 é mais bonito que Aluno e menos bonito que Jackson.&quot; 3.2.2.2 ifelse() A função ifelse() é separada de if() e é formada de uma sintaxe mais simples e concisa. No entanto, ela pode ser usada para gerar o mesmo efeito que nas demonstrações anteriores usando if() com o modificador else. ifelse(Aluno*2&gt;=Jackson^2, &quot;Aluno é mais bonito!&quot;, &quot;Jackson é mais bonito!&quot;) ## [1] &quot;Jackson é mais bonito!&quot; Como mostrado acima, o uso de ifelse() usa a forma: ifelse(teste condicional, resultado se verdadeiro, resultado se falso) Declarações condicionais também podem ser aninhadas dentro uma outra. Adaptando o exemplo com o argumento else um outro teste é executado se o teste inicial é FALSE, onde o secundário é TRUE. ifelse(Aluno*2&gt;=Jackson^2, &quot;Aluno é mais bonito!&quot;, ifelse(Aluno*2&gt;=Jackson^0.5 ,&quot;Agora o Aluno é mais bonito!&quot;, &quot;Aluno continua feio!&quot;)) ## [1] &quot;Agora o Aluno é mais bonito!&quot; Se o teste secundário é ajustado de maneira que os resultados em um teste lógico FALSE, o seguinte resultado é retornado. ifelse(Aluno*2&gt;=Jackson^2, &quot;Aluno é mais bonito!&quot;, ifelse(Aluno*2&gt;=Jackson^3,&quot;Agora o Aluno é mais bonito!&quot;, &quot;Aluno continua feio!&quot;)) ## [1] &quot;Aluno continua feio!&quot; 3.3 Dica de leitura Mello and Peternelli (2013) Peng (2020) Kabacoff (2015) Venables and Smith (2020) Neth (2021) Yamamoto (2020) Freire (2020) Spatial Data Science - Indexing Indexing into a data structure r-coder datamentor - R ifelse Statement 3.4 Exercícios Crie o vetor p que contenham uma sequência de 200 iniciando em 0 aumentando 0.5. Eleve o vetor p ao cubo criando o vetor o e multiplique por p. Organize p por linhas em uma matriz com 10 colunas . Crie os elementos x = 10 e y = 25. Mostre na tela A declaração é verdadeira sob a condição de x ser menor que y. Mostre 2 maneiras condicionais de executar a declaração na qual mostraria A declaração é correta se x é menor ou igual a y, ou caso contrário mostre A declaração é incorreta se não for o caso. Atribua z = 50 e construa uma função ifelse() que testa se x é maior que y, mostrando true se a condição é encontrada. Aninhe dentro disso uma segunda condição que mostre uma verdadeira, uma falsa ou ambas falsas caso x seja maior que z. Use uma iteração restrita para gerar uma sequência de números de 1 até 20. Use iteração restrita para conduzir o cálculo (i^2)-i, onde i vai de 5 até 10. Use interação não restrita para gerar uma sequência de inteiros de -10 até -20. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
